package kleinert.soap.edn

import kleinert.soap.data.*
import java.io.Flushable
import java.math.BigDecimal
import java.math.BigInteger
import java.security.Key
import java.time.Instant
import java.util.*

/**
 * TODO
 *
 * @author Armin Kleinert
 */
class EDNSoapWriter private constructor(private val options: EDNSoapOptions, private val writer: Appendable) {
    companion object {
        fun pprintToString(obj: Any?, options: EDNSoapOptions = EDNSoapOptions.defaultOptions): String {
            val writer: StringBuilder = StringBuilder()
            EDNSoapWriter(options, writer).encode(obj)
            return writer.toString()
        }

        fun pprint(
            obj: Any?,
            options: EDNSoapOptions = EDNSoapOptions.defaultOptions,
            writer: Appendable
        ) {
            EDNSoapWriter(options, writer).encode(obj)
            if (writer is Flushable) writer.flush()
        }

        fun pprintln(
            obj: Any?,
            options: EDNSoapOptions = EDNSoapOptions.defaultOptions,
            writer: Appendable
        ) {
            EDNSoapWriter(options, writer).encode(obj)
            writer.append('\n')
            if (writer is Flushable) writer.flush()
        }

    }

    private fun tryEncoder(obj: Any): Boolean {
        var encoder: ((Any) -> Pair<String, Any?>?)? = null
        for ((jClass, enc) in options.ednClassEncoders) {
            if (jClass.isInstance(obj)) {
                encoder = enc
                break
            }
        }
        if (encoder == null)
            return false
        val (prefix, output) = encoder(obj) ?: return false
        writer.append('#').append(prefix).append(' ')
        encode(output)
        return true
    }

    private var currentColumn: Int = 0
    private var level: Int = 0
    private var lineStartSpace: String = ""

    private fun encode(obj: Any?) {
        when (obj) {
            is PersistentList<*> -> if (!tryEncoder(obj)) encodePersistentList(obj) // List, not vector

            is ByteArray -> if (!tryEncoder(obj)) encode(obj.toList()) // User-defined encoder or as vector
            is ShortArray -> if (!tryEncoder(obj)) encode(obj.toList()) // User-defined encoder or as vector
            is IntArray -> if (!tryEncoder(obj)) encode(obj.toList()) // User-defined encoder or as vector
            is LongArray -> if (!tryEncoder(obj)) encode(obj.toList()) // User-defined encoder or as vector
            is FloatArray -> if (!tryEncoder(obj)) encode(obj.toList()) // User-defined encoder or as vector
            is DoubleArray -> if (!tryEncoder(obj)) encode(obj.toList()) // User-defined encoder or as vector
            is Array<*> -> if (!tryEncoder(obj)) encode(obj.toList()) // User-defined encoder or as vector
            is List<*> -> if (!tryEncoder(obj)) encodeList(obj) // Vector

            is Set<*> -> if (!tryEncoder(obj)) encodeSet(obj)
            is Map<*, *> -> if (!tryEncoder(obj)) encodeMap(obj)

            is Iterable<*> -> if (!tryEncoder(obj)) encodeOtherIterable(obj)
            is Sequence<*> -> if (!tryEncoder(obj)) encodeSequence(obj)

            else -> encodeTerminal(obj)
        }
    }

    fun encodeTerminal(obj: Any?): CharSequence {return when (obj) {
        null -> encodeNull()
        true -> encodeBool(true)
        false -> encodeBool(false)

        is String -> encodeString(obj)
        is Keyword -> tryEncoder(obj) ?:encodeKeyword(obj)
        is Symbol -> if (!tryEncoder(obj)) encodeSymbol(obj)

        is Char -> encodeChar(obj)
        is Char32 -> encodeChar32(obj)
        is Byte, is Short, is Int, is Long, is Ratio -> encodePredefinedNumberType(obj as Number)
        is Float -> encodeFloat(obj)
        is Double -> encodeDouble(obj)
        is Complex -> encodeComplex(obj)
        is BigInteger, is BigDecimal -> encodePredefinedNumberType(obj as Number)

        is IObj<*> -> encodeIObj(obj)

        is UUID -> encodeUuid(obj)
        is Instant -> encodeInstant(obj)

        else -> if (!tryEncoder(obj)) writer.append(obj.toString())
    }
    }

    private  fun encodeIObj(obj:IObj<*>):CharSequence{
        val str = StringBuilder()
        str.append('^')
        currentColumn++
        encode(obj.meta)
        str.append(' ')
        currentColumn++
        encode(obj.obj)
        return str
    }

    private fun encodeUuid(obj:UUID): CharSequence ="#uuid \"$obj\""

    private fun encodeInstant(obj:Instant):CharSequence ="#inst \"$obj\""

    private fun encodePredefinedNumberType(obj: Number): CharSequence {
        val str = StringBuilder()
        when (obj) {
            is Byte, is Short, is Int, is Long, is Ratio -> str.append(obj.toString())
            is BigInteger -> str.append(obj.toString()).append('N')
            is BigDecimal -> str.append(obj.toString()).append('M')
            else -> str.append(obj.toString())
        }
        if (options.allowNumericSuffixes) {
            when (obj) {
                is Byte -> str.append("_i8")
                is Short -> str.append("_i16")
                is Int -> str.append("_i32")
            }
        }
        print("str.length=${str.length}, ")
        return str
    }

    private fun encodeFloat(obj: Float): CharSequence {
        val str =
            if (obj.isNaN()) "##NaN"
            else if (obj == Float.POSITIVE_INFINITY) "##INF"
            else if (obj == Float.NEGATIVE_INFINITY) "##-INF"
            else obj.toString()
        return str
    }

    private fun encodeDouble(obj: Double): CharSequence {
        val str =
            if (obj.isNaN()) "##NaN"
            else if (obj == Double.POSITIVE_INFINITY) "##INF"
            else if (obj == Double.NEGATIVE_INFINITY) "##-INF"
            else obj.toString()
        return str
    }

    private fun encodeComplex(obj: Complex): CharSequence {
        if (options.allowComplexNumberLiterals) {
            // Maybe some special handling?
            return obj.toString()
        } else {
            // Maybe some special handling?
            return obj.toString()
        }
    }

    private fun encodeNull(): CharSequence = "nil"
    private fun encodeBool(b:Boolean): CharSequence = if (b) "true" else "false"

    private fun encodeString(obj: String): CharSequence {
        val appender = StringBuilder()
        appender.append('"')
        for (chr in obj) {
            when (chr) {
                '\t' -> appender.append("\\t")
                '\b' -> appender.append("\\b")
                '\n' -> appender.append("\\n")
                '\r' -> appender.append("\\r")
                '\"' -> appender.append("\\\"")
                '\\' -> appender.append("\\\\")
                else -> appender.append(chr)
            }
        }
        writer.append('"')
        return appender
    }

    private fun encodeKeyword(obj: Keyword): Appendable {
        val str = obj.toString()
        writer.append(str)
        return writer
    }

    private fun encodeSymbol(obj: Symbol): Appendable {
        val str = obj.toString()
        writer.append(str)
        return writer
    }

    private fun encodeChar(obj: Char) {
        val str: StringBuilder = StringBuilder()
        when (obj) {
            '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@',
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
            '\\', '^', '_', '`',
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
            '|', '~', '§', '°', '´', '€' -> str.append('\\').append(obj)

            '\n' -> str.append("\\newline")
            ' ' -> str.append("\\space")
            '\t' -> str.append("\\tab")
            '\b' -> str.append("\\backspace")
            12.toChar() -> str.append("\\formfeed")
            '\r' -> str.append("\\return")

            else -> str.append(String.format("\\u%04x", obj.code))
        }
        writer.append(str)
    }

    private fun encodeChar32(obj: Char32): CharSequence {
        if (!options.allowDispatchChars) {
            return encodeString(obj.toString())
        }

        val str: StringBuilder = StringBuilder()
        when (obj.code) {
            '!'.code, '"'.code, '#'.code, '$'.code, '%'.code, '&'.code, '\''.code, '('.code, ')'.code, '*'.code, '+'.code,
            ','.code, '-'.code, '.'.code, '/'.code,
            '0'.code, '1'.code, '2'.code, '3'.code, '4'.code, '5'.code, '6'.code, '7'.code, '8'.code, '9'.code,
            ':'.code, ';'.code, '<'.code, '='.code, '>'.code, '?'.code, '@'.code,
            'A'.code, 'B'.code, 'C'.code, 'D'.code, 'E'.code, 'F'.code, 'G'.code, 'H'.code, 'I'.code, 'J'.code, 'K'.code,
            'L'.code, 'M'.code, 'N'.code, 'O'.code, 'P'.code, 'Q'.code, 'R'.code, 'S'.code, 'T'.code, 'U'.code, 'V'.code,
            'W'.code, 'X'.code, 'Y'.code, 'Z'.code,
            '\\'.code, '^'.code, '_'.code, '`'.code,
            'a'.code, 'b'.code, 'c'.code, 'd'.code, 'e'.code, 'f'.code, 'g'.code, 'h'.code, 'i'.code, 'j'.code, 'k'.code,
            'l'.code, 'm'.code, 'n'.code, 'o'.code, 'p'.code, 'q'.code, 'r'.code, 's'.code, 't'.code, 'u'.code, 'v'.code,
            'w'.code, 'x'.code, 'y'.code, 'z'.code,
            '|'.code, '~'.code, '§'.code, '°'.code, '´'.code, '€'.code
            -> str.append("#\\").append(obj.toString())

            '\n'.code -> str.append("#\\newline")
            ' '.code -> str.append("#\\space")
            '\t'.code -> str.append("#\\tab")
            '\b'.code -> str.append("#\\backspace")
            12 -> str.append("#\\formfeed")
            '\r'.code -> str.append("#\\return")

            else -> str.append(String.format("#\\u%08x", obj.code))
        }
        return str
    }

    private fun encodeSequence(obj: Sequence<*>) {
        incLevel()
        checkBreak(1)
        obj.joinTo(
            writer,
            separator = options.encodingSequenceSeparator,
            prefix = "(",
            postfix = ")",
            transform = { encode(it);"" },
        )
        decLevel()
    }

    private fun encodePersistentList(obj: PersistentList<*>) {
        incLevel()
        checkBreak(1)
        obj.joinTo(
            writer,
            separator = options.encodingSequenceSeparator,
            prefix = "(",
            postfix = ")",
            transform = { encode(it);"" },
        )
        decLevel()
    }

    private fun encodeOtherIterable(obj: Iterable<*>) {
        incLevel()
        checkBreak(1)
        obj.joinTo(
            writer,
            separator = options.encodingSequenceSeparator,
            prefix = "(",
            postfix = ")",
            transform = { encode(it);"" },
        )
        decLevel()
    }

    private fun encodeList(obj: List<*>) {
        incLevel()
        checkBreak(1)
        obj.joinTo(
            writer,
            separator = options.encodingSequenceSeparator,
            prefix = "[",
            postfix = "]",
            transform = { encode(it);"" },
        )
        decLevel()
    }

    private fun encodeSet(obj: Set<*>) {
        incLevel()
        checkBreak(2)
        obj.joinTo(
            writer,
            separator = options.encodingSequenceSeparator,
            prefix = "#{",
            postfix = "}",
            transform = { encode(it);"" },
        )
        decLevel()
    }

    private fun encodeMap(obj: Map<*, *>) = obj.map { it }.joinTo(
        writer,
        separator = options.encodingSequenceSeparator,
        prefix = "{",
        postfix = "}",
        transform = {
            encode(it.key)
            writer.append(' ')
            encode(it.value)
            ""
        },
    )

    private fun checkBreak(addWidth: Int) {
        currentColumn += addWidth
        println("currentColumn=$currentColumn")
        if (options.encoderMaxColumn < currentColumn) {
            breakLine()
        }
    }

    private fun breakLine() {
        currentColumn = options.encoderLineIndent.length * level
        writer.append('\n')
        writer.append(lineStartSpace)
    }

    private fun incLevel() {
        level++
        lineStartSpace = options.encoderLineIndent.repeat(level)
    }

    private fun decLevel() {
        require(level > 0)
        level--
        lineStartSpace = options.encoderLineIndent.repeat(level)
    }
}